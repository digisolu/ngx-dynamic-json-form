"use strict";(self.webpackChunk_ngx_dynamic_json_form_common=self.webpackChunk_ngx_dynamic_json_form_common||[]).push([[942],{"./projects/ngx-dynamic-json-form-material/src/stories/beginning/getting-started.mdx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{default:()=>getting_started});__webpack_require__("./node_modules/react/index.js");var jsx_runtime=__webpack_require__("./node_modules/react/jsx-runtime.js"),lib=__webpack_require__("./node_modules/@mdx-js/react/lib/index.js"),dist=__webpack_require__("./node_modules/@storybook/blocks/dist/index.mjs");const getting_started=function MDXContent(props={}){const{wrapper:MDXLayout}=Object.assign({},(0,lib.ah)(),props.components);return MDXLayout?(0,jsx_runtime.jsx)(MDXLayout,Object.assign({},props,{children:(0,jsx_runtime.jsx)(_createMdxContent,{})})):_createMdxContent();function _createMdxContent(){return(0,jsx_runtime.jsxs)(jsx_runtime.Fragment,{children:[(0,jsx_runtime.jsx)(dist.h_,{title:"Beginning/Getting Started"}),"\n",(0,jsx_runtime.jsx)(dist.UG,{children:'# Quick Start\n\n- Demo: [here](https://digisolu.github.io/ngx-dynamic-json-form/?path=/docs/examples-and-guides-registration-form--documentation)\n- Docs: [here](https://digisolu.github.io/ngx-dynamic-json-form/)\n\n## Versions\n\n<table width="100%">\n  <thead>\n    <tr>\n      <th align="left">Angular</th>\n      <th align="left">Angular Material</th>\n      <th align="left">ngx-dynamic-json-form/core</th>\n      <th align="left">ngx-dynamic-json-form/material</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>15.x.x</td>\n      <td>15.x.x</td>\n      <td>1.x.x</td>\n      <td>1.x.x</td>\n    </tr>\n    <tr>\n      <td>16.x.x</td>\n      <td>16.x.x</td>\n      <td>not tested yet</td>\n      <td>not tested yet</td>\n    </tr>\n  </tbody>\n</table>\n\n## Install and Usage\n\nThis is a step by step instruction to install and use `ngx-dynamic-json-form`.\n\n### 1. Install all packages:\n\n```sh\nnpm i @ngx-dynamic-json-form/core @ngx-dynamic-json-form/material @ngx-mat-select-search --save\n```\n\nPlease make sure, that `@angular/forms` and `"@angular/material` are installed too.\n\n### 2. Add `ngx-dynamic-json-form` to your `AppModule`\n\n```typescript\n\nimport { AppComponent } from \'./app.component\';\nimport { NgxDynamicJsonFormMaterialModule } from \'@ngx-dynamic-json-form/material\';\n\n@NgModule({\n  imports: [\n    BrowserModule\n    NgxDynamicJsonFormMaterialModule.forRoot()\n  ],\n  ...\n})\nexport class AppModule {}\n```\n\nThe `forRoot()` method call is required on root level.\n\nThis method is used to override default configurations and is needed to register custom components.\n\nMore information can be found in the [global configuration section](https://digisolu.github.io/ngx-dynamic-json-form/?path=/docs/examples-and-guides-global-configurations--documentation).\n\n### 3. Configure the form in the component TS\n\n```typescript\n@Component({\n  // ...\n  changeDetection: ChangeDetectionStrategy.OnPush, // <- Recommended\n})\nexport class MyComponent implements OnInit {\n  public form: FormGroup = new FormGroup({}); // <- The form instance\n\n  // The form fields\n  public fields: FormField[] = [\n    {\n      type: "select",\n      key: "language",\n      label: "Language",\n      options: [\n        { label: "Language 1", value: "1" },\n        // ...\n      ],\n    },\n  ];\n\n  // The callback method to get the instance of the form\n  public setForm(form: FormGroup): void {\n    this.form = form;\n  }\n}\n```\n\n### 4. Use `ngx-dynamic-json-form` in the component HTML\n\n```html\n<ngx-dynamic-json-form\n  [fields]="fields"\n  (getForm)="setForm($event)"\n  [initial]="initialValues"\n  formClassName="my-form-class"\n></ngx-dynamic-json-form>\n```\n\n<table width="100%">\n  <thead>\n    <tr>\n      <th align="left">Input</th>\n      <th align="left">Description</th>\n      <th align="left">Required</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>`fields`</td>\n      <td>This is the configuration of all form fields.</td>\n      <td>Yes</td>\n    </tr>\n    <tr>\n      <td>`getForm`</td>\n      <td>A callback to get the instance of the `FormGroup`.</td>\n      <td>No</td>\n    </tr>\n    <tr>\n      <td>`initial`</td>\n      <td>An object with the initial values of the form.</td>\n      <td>No</td>\n    </tr>\n    <tr>\n      <td>`formClassName`</td>\n      <td>Add a class name to the form.</td>\n      <td>No</td>\n    </tr>\n  </tbody>\n</table>\n'})]})}}}}]);